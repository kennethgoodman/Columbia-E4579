# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1djXqed_FmxTDSl8gdIj3kF9dPy_8IE
"""

import random
from src import db
from sqlalchemy.sql import text

from .AbstractModel import AbstractModel


class BetaModel(AbstractModel):
    def predict_probabilities(self, content_ids, user_id, seed=None, **kwargs):
        # num of like
        get_likes_content_ids = text(f"""
            SELECT
                a.content_id,  
                case when like_num > 0 then like_num else 0 end as like_num
            from
                (
                    SELECT content_id
                    from generated_content_metadata 
                    where content_id in ({','.join(map(str, content_ids))}) 
                    group by 
                        content_id
                ) a left join (
                    SELECT
                        content_id,  
                        sum(if(engagement_type = 'Like', engagement_value, 0)) as like_num 
                    from engagement 
                    where 
                        engagement_type = 'Like'
                    group by 
                        content_id
                ) b on a.content_id = b.content_id
        """)

        get_styles_for_content_ids = text(f"""
            SELECT content_id, artist_style 
            from generated_content_metadata 
            where content_id in ({','.join(map(str, content_ids))})
        """)

        get_sources_for_content_ids = text(f"""
            SELECT content_id, source 
            from generated_content_metadata 
            where content_id in ({','.join(map(str, content_ids))})
        """)

        get_styles_user_has_liked = text(f"""
            select DISTINCT artist_style 
            from engagement 
            inner join generated_content_metadata 
                using (content_id) 
                where user_id = {user_id} and engagement_type='Like' and engagement_value=1;
        """)

        get_sources_user_has_liked = text(f"""
            select DISTINCT source 
            from engagement 
            inner join generated_content_metadata 
                using (content_id) 
                where user_id = {user_id} and engagement_type='Like' and engagement_value=1;
        """)

        get_length_for_content_ids = text(f"""
            SELECT content_id, length(prompt) as prompt_len
            from generated_content_metadata 
            where content_id in ({','.join(map(str, content_ids))})
        """)


        with db.engine.connect() as con:
            styles_for_content_ids = list(con.execute(get_styles_for_content_ids))
            content_id_to_style_map = {}
            for (content_id, artist_style) in styles_for_content_ids:
                content_id_to_style_map[content_id] = artist_style

            sources_for_content_ids = list(con.execute(get_sources_for_content_ids))
            content_id_to_source_map = {}
            for (content_id, source) in sources_for_content_ids:
                content_id_to_source_map[content_id] = source

            lens_for_content_ids = list(con.execute(get_length_for_content_ids))
            content_id_to_len_map = {}
            for (content_id, prompt_len) in lens_for_content_ids:
                content_id_to_len_map[content_id] = prompt_len

            results = con.execute(get_styles_user_has_liked)
            styles_user_has_liked = set(map(lambda x: x[0], results))

            results2 = con.execute(get_sources_user_has_liked)
            sources_user_has_liked = set(map(lambda x: x[0], results2))

            # results_num_like = con.execute(get_likes_content_ids)
            # num_like = set(map(lambda x: x[0], results_num_like))


            num_like_content_ids = list(con.execute(get_likes_content_ids))
            content_id_to_num_like = {}
            for (content_id, num_like) in num_like_content_ids:
                content_id_to_num_like[content_id] = num_like


        return list(
            map(
                lambda content_id: {
                    "content_id": content_id,
                    "p_engage": 0.5 * float(content_id_to_num_like[content_id]) + 
                                0.67519*float(content_id_to_style_map[content_id] in styles_user_has_liked) + 
                                0.40762*float(content_id_to_source_map[content_id] in sources_user_has_liked) 
                                - 0.95513 * (content_id_to_len_map[content_id]-15)/1518,
                    # "p_engage" : - content_id_to_len_map[content_id],
                    "score": kwargs.get("scores", {})
                    .get(content_id, {})
                    .get("score", None),
                },
                content_ids,
            )
        )